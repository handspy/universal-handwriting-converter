
plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Maven publish plugin
    id 'maven-publish'

    // Bintray plugin for publishing
    id 'com.jfrog.bintray' version "${bintray_plugin_version}"
}

sourceCompatibility=1.8
targetCompatibility=1.8
assert System.properties["java.specification.version"] == "1.8" || "11" || "12" || "13"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    xjc
}

dependencies {

    // Use JAXB only for generating java from XML
    xjc "org.glassfish.jaxb:jaxb-xjc:${jaxb_xjc_version}"
    xjc "org.jvnet.jaxb2_commons:jaxb2-basics-annotate:${jaxb2_basics_annotate}"
    xjc "org.jvnet.jaxb2_commons:jaxb2-basics:${jaxb2_basics}"
    xjc "org.jvnet.jaxb2_commons:jaxb2-basics-ant:${jaxb2_basics}"

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation "org.apache.commons:commons-compress:${commons_compress_version}"
    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    implementation "javax.xml.bind:jaxb-api:${jaxb_api_version}"
    implementation "com.github.cliftonlabs:json-simple:${json_simple_version}"
    implementation "org.apache.pdfbox:pdfbox:${pdfbox_version}"

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

apply plugin: 'java'

def generatedJaxb = "${buildDir}/generated/jaxb"

sourceSets {
    main {
        output.dir(generatedJaxb, builtBy: 'xjc')
        java {
            srcDirs += generatedJaxb
        }
    }
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

/**
 * Get the latest modification time of the files in the file collection.
 *
 * @param files
 */
def latestModificationTime(files) {

    def modificationTime = 0;
    files.each { file ->
        if (modificationTime < file.lastModified()) {
            modificationTime = file.lastModified()
        }
    }
    return modificationTime;
}

/**
 * Task to create Java class files from XML schemas.
 */
task xjc(description: 'XML schema to Java compiler') {

    ext.schemaDir   = "src/main/resources/schema"
    ext.outputDir   = generatedJaxb
   // ext.packageName = 'pt.up.hs.uhc.types'
    ext.schemas     = ['**/*.xsd']
    ext.bindings    = ['**/*.jxb']
    ext.classes     = []
    ext.args        = []

    onlyIf {
        def schemaModifiedTime = latestModificationTime(fileTree(dir: schemaDir, includes: schemas + bindings))
        def outputModifiedTime = latestModificationTime(fileTree(dir: outputDir, includes: classes))
        return schemaModifiedTime > outputModifiedTime
    }
    doFirst {
        file(outputDir).mkdirs()
    }
    doLast {
        ant.taskdef(
                name: 'xjc',
                classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
                classpath: configurations.xjc.asPath)
        ant.xjc(
                destDir: outputDir,
                extension: 'true',
//                package: packageName,
        ) {
            schema(dir: schemaDir, includes: schemas.join(' '))
            binding(dir: schemaDir, includes: bindings.join(' '))
            args.each { val ->
                arg(value: val)
            }
        }
    }
}

ext {
    bintrayUserOrg = 'handspy'
    bintrayRepo = 'maven'
    bintrayName = rootProject.name

    libraryName = rootProject.name

    publishedGroupId = 'pt.up.hs'
    artifact = rootProject.name
    libraryVersion = version

    libraryDescription = "A Java library to read/write handwriting data to any format that can represent\n" +
            "it. It uses an internal format, known as HandSpy Page (coined for its roots\n" +
            "from HandSpy v3), to represent handwriting data."

    siteUrl = 'https://github.com/handspy/universal-handwriting-converter'
    gitUrl = 'https://github.com/handspy/universal-handwriting-converter.git'

    developerId = 'jcpaiva'
    developerName = 'Jos√© Carlos Paiva'
    developerEmail = 'josepaiva94@gmail.com'

    licenseName = 'MIT'
    licenseUrl = 'https://opensource.org/licenses/MIT'
    allLicenses = ['MIT']
}

jar {
    manifest {
        attributes 'Main-Class': 'pt.up.hs.uhc.Cli'
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

/*task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}*/

artifacts {
    /*archives javadocJar*/
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name licenseName
            url licenseUrl
            distribution "repo"
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }

    scm {
        url gitUrl
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            /*artifact javadocJar*/
            groupId publishedGroupId
            artifactId artifactId
            version libraryVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('description', libraryDescription)
                root.appendNode('name', libraryName)
                root.appendNode('url', siteUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['MyPublication']

    // configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayUserOrg
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true

        version {
            desc = libraryDescription
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}

//Eclipse/IDEA plugins will automatically depend on 'xjc'
//because the output dir was registered with 'builtBy' information
apply plugin: 'idea'; apply plugin: 'eclipse'

// Insert XJC into the task dependency graph
xjc.dependsOn(JavaPlugin.PROCESS_RESOURCES_TASK_NAME)
compileJava.dependsOn(xjc)
